// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tester.Core.Common;
using Tester.Migrator;

namespace Tester.Migrator.Migrations
{
    [DbContext(typeof(DbContextFactory.MigratorEfDataConnection))]
    partial class MigratorEfDataConnectionModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:gender", "undefined,man,woman")
                .HasAnnotation("Npgsql:Enum:question_type", "open,multiple_selection,ordered_list,conformity,single_selection")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tester.Db.Model.Client.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role","client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7b718a4-535f-4e91-8b1e-8c65012c8960"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("427912c2-1327-463d-a0fc-5e864528aeb0"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("6cb9dc41-d6b5-4cd9-b0b8-a085f5742449"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lecturer"
                        },
                        new
                        {
                            Id = new Guid("3638240a-0a54-42a6-81fb-3393d7336684"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("Tester.Db.Model.Client.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityTimestamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("user","client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60396f59-dcd2-4045-9029-793df7cee7ea"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "admin",
                            Password = "10-57-FD-75-B5-7A-95-53-F0-B7-92-16-4C-01-5F-8C",
                            Salt = "8a57ad97-45fe-4db1-89c4-3973e0852177",
                            SecurityTimestamp = new Guid("b73df749-8157-4f3f-880e-a083e0d90b4c"),
                            UpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tester.Db.Model.Client.UserData", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Name");

                    b.ToTable("user_data","client");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("60396f59-dcd2-4045-9029-793df7cee7ea"),
                            Gender = Gender.Undefined,
                            Name = "admin",
                            UpdatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tester.Db.Model.Client.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role","client");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("60396f59-dcd2-4045-9029-793df7cee7ea"),
                            RoleId = new Guid("f7b718a4-535f-4e91-8b1e-8c65012c8960"),
                            CreatedUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tester.Db.Model.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hint")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<QuestionType>("Type")
                        .HasColumnType("question_type");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("Name");

                    b.HasIndex("TopicId");

                    b.HasIndex("Type");

                    b.ToTable("question","app");
                });

            modelBuilder.Entity("Tester.Db.Model.Statistics.UserAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserTestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserTestId");

                    b.ToTable("user_answer","report");
                });

            modelBuilder.Entity("Tester.Db.Model.Statistics.UserTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ExaminerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("interval");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("ExaminerId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("user_test","report");
                });

            modelBuilder.Entity("Tester.Db.Model.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("Name");

                    b.ToTable("test","app");
                });

            modelBuilder.Entity("Tester.Db.Model.TestTopic", b =>
                {
                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TopicId", "TestId");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("TestId");

                    b.ToTable("test_topic","app");
                });

            modelBuilder.Entity("Tester.Db.Model.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedUtc");

                    b.HasIndex("DeletedUtc");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("topic","app");
                });

            modelBuilder.Entity("Tester.Db.Model.Client.UserData", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("Tester.Db.Model.Client.UserData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Client.UserRole", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Client.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Question", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.User", "Author")
                        .WithMany("Questions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Statistics.UserAnswer", b =>
                {
                    b.HasOne("Tester.Db.Model.Question", "Question")
                        .WithMany("UserAnswer")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Statistics.UserTest", "UserTest")
                        .WithMany("UserAnswer")
                        .HasForeignKey("UserTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Statistics.UserTest", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.User", "Examiner")
                        .WithMany("Observers")
                        .HasForeignKey("ExaminerId");

                    b.HasOne("Tester.Db.Model.Test", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Client.User", "User")
                        .WithMany("UserTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Test", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.User", "Author")
                        .WithMany("Tests")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.TestTopic", b =>
                {
                    b.HasOne("Tester.Db.Model.Test", "Test")
                        .WithMany("TestTopics")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Topic", "Topic")
                        .WithMany("TestTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tester.Db.Model.Topic", b =>
                {
                    b.HasOne("Tester.Db.Model.Client.User", "Author")
                        .WithMany("Topics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tester.Db.Model.Topic", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
